/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package es.udc.ws.runfic.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftCarreraService {

  public interface Iface {

    public long addCarrera(ThriftCarreraDto carrera) throws ThriftInputValidationException, org.apache.thrift.TException;

    public ThriftCarreraDto findCarrera(long carreraId) throws org.apache.thrift.TException;

    public List<ThriftCarreraDto> findCarreras(String fechaMax, String ciudad) throws org.apache.thrift.TException;

    public long addInscripcion(ThriftInscripcionDto inscripcion) throws ThriftInputValidationException, ThriftInstanceNotFoundException, ThriftMaxCapacityException, ThriftOutOfTimeException, ThriftAlreadyRegisteredException, org.apache.thrift.TException;

    public int recogerDorsal(long inscripcionId, String tarjeta) throws ThriftInputValidationException, ThriftInstanceNotFoundException, ThriftClientDorsalEntregadoException, ThriftClientTarjetaNotEqualException, org.apache.thrift.TException;

    public ThriftInscripcionDto findInscripcion(long inscripcionId) throws ThriftInstanceNotFoundException, org.apache.thrift.TException;

    public List<ThriftInscripcionDto> findInscripciones(String email) throws ThriftInputValidationException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addCarrera(ThriftCarreraDto carrera, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findCarrera(long carreraId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findCarreras(String fechaMax, String ciudad, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addInscripcion(ThriftInscripcionDto inscripcion, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void recogerDorsal(long inscripcionId, String tarjeta, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findInscripcion(long inscripcionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findInscripciones(String email, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long addCarrera(ThriftCarreraDto carrera) throws ThriftInputValidationException, org.apache.thrift.TException
    {
      send_addCarrera(carrera);
      return recv_addCarrera();
    }

    public void send_addCarrera(ThriftCarreraDto carrera) throws org.apache.thrift.TException
    {
      addCarrera_args args = new addCarrera_args();
      args.setCarrera(carrera);
      sendBase("addCarrera", args);
    }

    public long recv_addCarrera() throws ThriftInputValidationException, org.apache.thrift.TException
    {
      addCarrera_result result = new addCarrera_result();
      receiveBase(result, "addCarrera");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addCarrera failed: unknown result");
    }

    public ThriftCarreraDto findCarrera(long carreraId) throws org.apache.thrift.TException
    {
      send_findCarrera(carreraId);
      return recv_findCarrera();
    }

    public void send_findCarrera(long carreraId) throws org.apache.thrift.TException
    {
      findCarrera_args args = new findCarrera_args();
      args.setCarreraId(carreraId);
      sendBase("findCarrera", args);
    }

    public ThriftCarreraDto recv_findCarrera() throws org.apache.thrift.TException
    {
      findCarrera_result result = new findCarrera_result();
      receiveBase(result, "findCarrera");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findCarrera failed: unknown result");
    }

    public List<ThriftCarreraDto> findCarreras(String fechaMax, String ciudad) throws org.apache.thrift.TException
    {
      send_findCarreras(fechaMax, ciudad);
      return recv_findCarreras();
    }

    public void send_findCarreras(String fechaMax, String ciudad) throws org.apache.thrift.TException
    {
      findCarreras_args args = new findCarreras_args();
      args.setFechaMax(fechaMax);
      args.setCiudad(ciudad);
      sendBase("findCarreras", args);
    }

    public List<ThriftCarreraDto> recv_findCarreras() throws org.apache.thrift.TException
    {
      findCarreras_result result = new findCarreras_result();
      receiveBase(result, "findCarreras");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findCarreras failed: unknown result");
    }

    public long addInscripcion(ThriftInscripcionDto inscripcion) throws ThriftInputValidationException, ThriftInstanceNotFoundException, ThriftMaxCapacityException, ThriftOutOfTimeException, ThriftAlreadyRegisteredException, org.apache.thrift.TException
    {
      send_addInscripcion(inscripcion);
      return recv_addInscripcion();
    }

    public void send_addInscripcion(ThriftInscripcionDto inscripcion) throws org.apache.thrift.TException
    {
      addInscripcion_args args = new addInscripcion_args();
      args.setInscripcion(inscripcion);
      sendBase("addInscripcion", args);
    }

    public long recv_addInscripcion() throws ThriftInputValidationException, ThriftInstanceNotFoundException, ThriftMaxCapacityException, ThriftOutOfTimeException, ThriftAlreadyRegisteredException, org.apache.thrift.TException
    {
      addInscripcion_result result = new addInscripcion_result();
      receiveBase(result, "addInscripcion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      if (result.ee != null) {
        throw result.ee;
      }
      if (result.eee != null) {
        throw result.eee;
      }
      if (result.eeee != null) {
        throw result.eeee;
      }
      if (result.eeeee != null) {
        throw result.eeeee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addInscripcion failed: unknown result");
    }

    public int recogerDorsal(long inscripcionId, String tarjeta) throws ThriftInputValidationException, ThriftInstanceNotFoundException, ThriftClientDorsalEntregadoException, ThriftClientTarjetaNotEqualException, org.apache.thrift.TException
    {
      send_recogerDorsal(inscripcionId, tarjeta);
      return recv_recogerDorsal();
    }

    public void send_recogerDorsal(long inscripcionId, String tarjeta) throws org.apache.thrift.TException
    {
      recogerDorsal_args args = new recogerDorsal_args();
      args.setInscripcionId(inscripcionId);
      args.setTarjeta(tarjeta);
      sendBase("recogerDorsal", args);
    }

    public int recv_recogerDorsal() throws ThriftInputValidationException, ThriftInstanceNotFoundException, ThriftClientDorsalEntregadoException, ThriftClientTarjetaNotEqualException, org.apache.thrift.TException
    {
      recogerDorsal_result result = new recogerDorsal_result();
      receiveBase(result, "recogerDorsal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      if (result.ee != null) {
        throw result.ee;
      }
      if (result.eee != null) {
        throw result.eee;
      }
      if (result.eeee != null) {
        throw result.eeee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "recogerDorsal failed: unknown result");
    }

    public ThriftInscripcionDto findInscripcion(long inscripcionId) throws ThriftInstanceNotFoundException, org.apache.thrift.TException
    {
      send_findInscripcion(inscripcionId);
      return recv_findInscripcion();
    }

    public void send_findInscripcion(long inscripcionId) throws org.apache.thrift.TException
    {
      findInscripcion_args args = new findInscripcion_args();
      args.setInscripcionId(inscripcionId);
      sendBase("findInscripcion", args);
    }

    public ThriftInscripcionDto recv_findInscripcion() throws ThriftInstanceNotFoundException, org.apache.thrift.TException
    {
      findInscripcion_result result = new findInscripcion_result();
      receiveBase(result, "findInscripcion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findInscripcion failed: unknown result");
    }

    public List<ThriftInscripcionDto> findInscripciones(String email) throws ThriftInputValidationException, org.apache.thrift.TException
    {
      send_findInscripciones(email);
      return recv_findInscripciones();
    }

    public void send_findInscripciones(String email) throws org.apache.thrift.TException
    {
      findInscripciones_args args = new findInscripciones_args();
      args.setEmail(email);
      sendBase("findInscripciones", args);
    }

    public List<ThriftInscripcionDto> recv_findInscripciones() throws ThriftInputValidationException, org.apache.thrift.TException
    {
      findInscripciones_result result = new findInscripciones_result();
      receiveBase(result, "findInscripciones");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findInscripciones failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addCarrera(ThriftCarreraDto carrera, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addCarrera_call method_call = new addCarrera_call(carrera, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addCarrera_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ThriftCarreraDto carrera;
      public addCarrera_call(ThriftCarreraDto carrera, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.carrera = carrera;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addCarrera", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addCarrera_args args = new addCarrera_args();
        args.setCarrera(carrera);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ThriftInputValidationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addCarrera();
      }
    }

    public void findCarrera(long carreraId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findCarrera_call method_call = new findCarrera_call(carreraId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findCarrera_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long carreraId;
      public findCarrera_call(long carreraId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.carreraId = carreraId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findCarrera", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findCarrera_args args = new findCarrera_args();
        args.setCarreraId(carreraId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ThriftCarreraDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findCarrera();
      }
    }

    public void findCarreras(String fechaMax, String ciudad, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findCarreras_call method_call = new findCarreras_call(fechaMax, ciudad, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findCarreras_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String fechaMax;
      private String ciudad;
      public findCarreras_call(String fechaMax, String ciudad, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fechaMax = fechaMax;
        this.ciudad = ciudad;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findCarreras", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findCarreras_args args = new findCarreras_args();
        args.setFechaMax(fechaMax);
        args.setCiudad(ciudad);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ThriftCarreraDto> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findCarreras();
      }
    }

    public void addInscripcion(ThriftInscripcionDto inscripcion, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addInscripcion_call method_call = new addInscripcion_call(inscripcion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addInscripcion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ThriftInscripcionDto inscripcion;
      public addInscripcion_call(ThriftInscripcionDto inscripcion, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inscripcion = inscripcion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addInscripcion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addInscripcion_args args = new addInscripcion_args();
        args.setInscripcion(inscripcion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ThriftInputValidationException, ThriftInstanceNotFoundException, ThriftMaxCapacityException, ThriftOutOfTimeException, ThriftAlreadyRegisteredException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addInscripcion();
      }
    }

    public void recogerDorsal(long inscripcionId, String tarjeta, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recogerDorsal_call method_call = new recogerDorsal_call(inscripcionId, tarjeta, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recogerDorsal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long inscripcionId;
      private String tarjeta;
      public recogerDorsal_call(long inscripcionId, String tarjeta, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inscripcionId = inscripcionId;
        this.tarjeta = tarjeta;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recogerDorsal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recogerDorsal_args args = new recogerDorsal_args();
        args.setInscripcionId(inscripcionId);
        args.setTarjeta(tarjeta);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws ThriftInputValidationException, ThriftInstanceNotFoundException, ThriftClientDorsalEntregadoException, ThriftClientTarjetaNotEqualException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_recogerDorsal();
      }
    }

    public void findInscripcion(long inscripcionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findInscripcion_call method_call = new findInscripcion_call(inscripcionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findInscripcion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long inscripcionId;
      public findInscripcion_call(long inscripcionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inscripcionId = inscripcionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findInscripcion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findInscripcion_args args = new findInscripcion_args();
        args.setInscripcionId(inscripcionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ThriftInscripcionDto getResult() throws ThriftInstanceNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findInscripcion();
      }
    }

    public void findInscripciones(String email, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findInscripciones_call method_call = new findInscripciones_call(email, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findInscripciones_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String email;
      public findInscripciones_call(String email, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.email = email;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findInscripciones", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findInscripciones_args args = new findInscripciones_args();
        args.setEmail(email);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ThriftInscripcionDto> getResult() throws ThriftInputValidationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findInscripciones();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addCarrera", new addCarrera());
      processMap.put("findCarrera", new findCarrera());
      processMap.put("findCarreras", new findCarreras());
      processMap.put("addInscripcion", new addInscripcion());
      processMap.put("recogerDorsal", new recogerDorsal());
      processMap.put("findInscripcion", new findInscripcion());
      processMap.put("findInscripciones", new findInscripciones());
      return processMap;
    }

    public static class addCarrera<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addCarrera_args> {
      public addCarrera() {
        super("addCarrera");
      }

      public addCarrera_args getEmptyArgsInstance() {
        return new addCarrera_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addCarrera_result getResult(I iface, addCarrera_args args) throws org.apache.thrift.TException {
        addCarrera_result result = new addCarrera_result();
        try {
          result.success = iface.addCarrera(args.carrera);
          result.setSuccessIsSet(true);
        } catch (ThriftInputValidationException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class findCarrera<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findCarrera_args> {
      public findCarrera() {
        super("findCarrera");
      }

      public findCarrera_args getEmptyArgsInstance() {
        return new findCarrera_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findCarrera_result getResult(I iface, findCarrera_args args) throws org.apache.thrift.TException {
        findCarrera_result result = new findCarrera_result();
        result.success = iface.findCarrera(args.carreraId);
        return result;
      }
    }

    public static class findCarreras<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findCarreras_args> {
      public findCarreras() {
        super("findCarreras");
      }

      public findCarreras_args getEmptyArgsInstance() {
        return new findCarreras_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findCarreras_result getResult(I iface, findCarreras_args args) throws org.apache.thrift.TException {
        findCarreras_result result = new findCarreras_result();
        result.success = iface.findCarreras(args.fechaMax, args.ciudad);
        return result;
      }
    }

    public static class addInscripcion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addInscripcion_args> {
      public addInscripcion() {
        super("addInscripcion");
      }

      public addInscripcion_args getEmptyArgsInstance() {
        return new addInscripcion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addInscripcion_result getResult(I iface, addInscripcion_args args) throws org.apache.thrift.TException {
        addInscripcion_result result = new addInscripcion_result();
        try {
          result.success = iface.addInscripcion(args.inscripcion);
          result.setSuccessIsSet(true);
        } catch (ThriftInputValidationException e) {
          result.e = e;
        } catch (ThriftInstanceNotFoundException ee) {
          result.ee = ee;
        } catch (ThriftMaxCapacityException eee) {
          result.eee = eee;
        } catch (ThriftOutOfTimeException eeee) {
          result.eeee = eeee;
        } catch (ThriftAlreadyRegisteredException eeeee) {
          result.eeeee = eeeee;
        }
        return result;
      }
    }

    public static class recogerDorsal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recogerDorsal_args> {
      public recogerDorsal() {
        super("recogerDorsal");
      }

      public recogerDorsal_args getEmptyArgsInstance() {
        return new recogerDorsal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public recogerDorsal_result getResult(I iface, recogerDorsal_args args) throws org.apache.thrift.TException {
        recogerDorsal_result result = new recogerDorsal_result();
        try {
          result.success = iface.recogerDorsal(args.inscripcionId, args.tarjeta);
          result.setSuccessIsSet(true);
        } catch (ThriftInputValidationException e) {
          result.e = e;
        } catch (ThriftInstanceNotFoundException ee) {
          result.ee = ee;
        } catch (ThriftClientDorsalEntregadoException eee) {
          result.eee = eee;
        } catch (ThriftClientTarjetaNotEqualException eeee) {
          result.eeee = eeee;
        }
        return result;
      }
    }

    public static class findInscripcion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findInscripcion_args> {
      public findInscripcion() {
        super("findInscripcion");
      }

      public findInscripcion_args getEmptyArgsInstance() {
        return new findInscripcion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findInscripcion_result getResult(I iface, findInscripcion_args args) throws org.apache.thrift.TException {
        findInscripcion_result result = new findInscripcion_result();
        try {
          result.success = iface.findInscripcion(args.inscripcionId);
        } catch (ThriftInstanceNotFoundException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class findInscripciones<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findInscripciones_args> {
      public findInscripciones() {
        super("findInscripciones");
      }

      public findInscripciones_args getEmptyArgsInstance() {
        return new findInscripciones_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findInscripciones_result getResult(I iface, findInscripciones_args args) throws org.apache.thrift.TException {
        findInscripciones_result result = new findInscripciones_result();
        try {
          result.success = iface.findInscripciones(args.email);
        } catch (ThriftInputValidationException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addCarrera", new addCarrera());
      processMap.put("findCarrera", new findCarrera());
      processMap.put("findCarreras", new findCarreras());
      processMap.put("addInscripcion", new addInscripcion());
      processMap.put("recogerDorsal", new recogerDorsal());
      processMap.put("findInscripcion", new findInscripcion());
      processMap.put("findInscripciones", new findInscripciones());
      return processMap;
    }

    public static class addCarrera<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addCarrera_args, Long> {
      public addCarrera() {
        super("addCarrera");
      }

      public addCarrera_args getEmptyArgsInstance() {
        return new addCarrera_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            addCarrera_result result = new addCarrera_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addCarrera_result result = new addCarrera_result();
            if (e instanceof ThriftInputValidationException) {
                        result.e = (ThriftInputValidationException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addCarrera_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.addCarrera(args.carrera,resultHandler);
      }
    }

    public static class findCarrera<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findCarrera_args, ThriftCarreraDto> {
      public findCarrera() {
        super("findCarrera");
      }

      public findCarrera_args getEmptyArgsInstance() {
        return new findCarrera_args();
      }

      public AsyncMethodCallback<ThriftCarreraDto> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ThriftCarreraDto>() { 
          public void onComplete(ThriftCarreraDto o) {
            findCarrera_result result = new findCarrera_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findCarrera_result result = new findCarrera_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findCarrera_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftCarreraDto> resultHandler) throws TException {
        iface.findCarrera(args.carreraId,resultHandler);
      }
    }

    public static class findCarreras<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findCarreras_args, List<ThriftCarreraDto>> {
      public findCarreras() {
        super("findCarreras");
      }

      public findCarreras_args getEmptyArgsInstance() {
        return new findCarreras_args();
      }

      public AsyncMethodCallback<List<ThriftCarreraDto>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ThriftCarreraDto>>() { 
          public void onComplete(List<ThriftCarreraDto> o) {
            findCarreras_result result = new findCarreras_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findCarreras_result result = new findCarreras_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findCarreras_args args, org.apache.thrift.async.AsyncMethodCallback<List<ThriftCarreraDto>> resultHandler) throws TException {
        iface.findCarreras(args.fechaMax, args.ciudad,resultHandler);
      }
    }

    public static class addInscripcion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addInscripcion_args, Long> {
      public addInscripcion() {
        super("addInscripcion");
      }

      public addInscripcion_args getEmptyArgsInstance() {
        return new addInscripcion_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            addInscripcion_result result = new addInscripcion_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addInscripcion_result result = new addInscripcion_result();
            if (e instanceof ThriftInputValidationException) {
                        result.e = (ThriftInputValidationException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ThriftInstanceNotFoundException) {
                        result.ee = (ThriftInstanceNotFoundException) e;
                        result.setEeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ThriftMaxCapacityException) {
                        result.eee = (ThriftMaxCapacityException) e;
                        result.setEeeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ThriftOutOfTimeException) {
                        result.eeee = (ThriftOutOfTimeException) e;
                        result.setEeeeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ThriftAlreadyRegisteredException) {
                        result.eeeee = (ThriftAlreadyRegisteredException) e;
                        result.setEeeeeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addInscripcion_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.addInscripcion(args.inscripcion,resultHandler);
      }
    }

    public static class recogerDorsal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recogerDorsal_args, Integer> {
      public recogerDorsal() {
        super("recogerDorsal");
      }

      public recogerDorsal_args getEmptyArgsInstance() {
        return new recogerDorsal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            recogerDorsal_result result = new recogerDorsal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            recogerDorsal_result result = new recogerDorsal_result();
            if (e instanceof ThriftInputValidationException) {
                        result.e = (ThriftInputValidationException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ThriftInstanceNotFoundException) {
                        result.ee = (ThriftInstanceNotFoundException) e;
                        result.setEeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ThriftClientDorsalEntregadoException) {
                        result.eee = (ThriftClientDorsalEntregadoException) e;
                        result.setEeeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ThriftClientTarjetaNotEqualException) {
                        result.eeee = (ThriftClientTarjetaNotEqualException) e;
                        result.setEeeeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, recogerDorsal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.recogerDorsal(args.inscripcionId, args.tarjeta,resultHandler);
      }
    }

    public static class findInscripcion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findInscripcion_args, ThriftInscripcionDto> {
      public findInscripcion() {
        super("findInscripcion");
      }

      public findInscripcion_args getEmptyArgsInstance() {
        return new findInscripcion_args();
      }

      public AsyncMethodCallback<ThriftInscripcionDto> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ThriftInscripcionDto>() { 
          public void onComplete(ThriftInscripcionDto o) {
            findInscripcion_result result = new findInscripcion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findInscripcion_result result = new findInscripcion_result();
            if (e instanceof ThriftInstanceNotFoundException) {
                        result.e = (ThriftInstanceNotFoundException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findInscripcion_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftInscripcionDto> resultHandler) throws TException {
        iface.findInscripcion(args.inscripcionId,resultHandler);
      }
    }

    public static class findInscripciones<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findInscripciones_args, List<ThriftInscripcionDto>> {
      public findInscripciones() {
        super("findInscripciones");
      }

      public findInscripciones_args getEmptyArgsInstance() {
        return new findInscripciones_args();
      }

      public AsyncMethodCallback<List<ThriftInscripcionDto>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ThriftInscripcionDto>>() { 
          public void onComplete(List<ThriftInscripcionDto> o) {
            findInscripciones_result result = new findInscripciones_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findInscripciones_result result = new findInscripciones_result();
            if (e instanceof ThriftInputValidationException) {
                        result.e = (ThriftInputValidationException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findInscripciones_args args, org.apache.thrift.async.AsyncMethodCallback<List<ThriftInscripcionDto>> resultHandler) throws TException {
        iface.findInscripciones(args.email,resultHandler);
      }
    }

  }

  public static class addCarrera_args implements org.apache.thrift.TBase<addCarrera_args, addCarrera_args._Fields>, java.io.Serializable, Cloneable, Comparable<addCarrera_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCarrera_args");

    private static final org.apache.thrift.protocol.TField CARRERA_FIELD_DESC = new org.apache.thrift.protocol.TField("carrera", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addCarrera_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addCarrera_argsTupleSchemeFactory());
    }

    public ThriftCarreraDto carrera; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CARRERA((short)1, "carrera");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CARRERA
            return CARRERA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CARRERA, new org.apache.thrift.meta_data.FieldMetaData("carrera", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCarreraDto.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCarrera_args.class, metaDataMap);
    }

    public addCarrera_args() {
    }

    public addCarrera_args(
      ThriftCarreraDto carrera)
    {
      this();
      this.carrera = carrera;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCarrera_args(addCarrera_args other) {
      if (other.isSetCarrera()) {
        this.carrera = new ThriftCarreraDto(other.carrera);
      }
    }

    public addCarrera_args deepCopy() {
      return new addCarrera_args(this);
    }

    @Override
    public void clear() {
      this.carrera = null;
    }

    public ThriftCarreraDto getCarrera() {
      return this.carrera;
    }

    public addCarrera_args setCarrera(ThriftCarreraDto carrera) {
      this.carrera = carrera;
      return this;
    }

    public void unsetCarrera() {
      this.carrera = null;
    }

    /** Returns true if field carrera is set (has been assigned a value) and false otherwise */
    public boolean isSetCarrera() {
      return this.carrera != null;
    }

    public void setCarreraIsSet(boolean value) {
      if (!value) {
        this.carrera = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CARRERA:
        if (value == null) {
          unsetCarrera();
        } else {
          setCarrera((ThriftCarreraDto)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CARRERA:
        return getCarrera();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CARRERA:
        return isSetCarrera();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addCarrera_args)
        return this.equals((addCarrera_args)that);
      return false;
    }

    public boolean equals(addCarrera_args that) {
      if (that == null)
        return false;

      boolean this_present_carrera = true && this.isSetCarrera();
      boolean that_present_carrera = true && that.isSetCarrera();
      if (this_present_carrera || that_present_carrera) {
        if (!(this_present_carrera && that_present_carrera))
          return false;
        if (!this.carrera.equals(that.carrera))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addCarrera_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCarrera()).compareTo(other.isSetCarrera());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCarrera()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carrera, other.carrera);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addCarrera_args(");
      boolean first = true;

      sb.append("carrera:");
      if (this.carrera == null) {
        sb.append("null");
      } else {
        sb.append(this.carrera);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (carrera != null) {
        carrera.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCarrera_argsStandardSchemeFactory implements SchemeFactory {
      public addCarrera_argsStandardScheme getScheme() {
        return new addCarrera_argsStandardScheme();
      }
    }

    private static class addCarrera_argsStandardScheme extends StandardScheme<addCarrera_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCarrera_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CARRERA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.carrera = new ThriftCarreraDto();
                struct.carrera.read(iprot);
                struct.setCarreraIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCarrera_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.carrera != null) {
          oprot.writeFieldBegin(CARRERA_FIELD_DESC);
          struct.carrera.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCarrera_argsTupleSchemeFactory implements SchemeFactory {
      public addCarrera_argsTupleScheme getScheme() {
        return new addCarrera_argsTupleScheme();
      }
    }

    private static class addCarrera_argsTupleScheme extends TupleScheme<addCarrera_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCarrera_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCarrera()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCarrera()) {
          struct.carrera.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCarrera_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.carrera = new ThriftCarreraDto();
          struct.carrera.read(iprot);
          struct.setCarreraIsSet(true);
        }
      }
    }

  }

  public static class addCarrera_result implements org.apache.thrift.TBase<addCarrera_result, addCarrera_result._Fields>, java.io.Serializable, Cloneable, Comparable<addCarrera_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCarrera_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addCarrera_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addCarrera_resultTupleSchemeFactory());
    }

    public long success; // required
    public ThriftInputValidationException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCarrera_result.class, metaDataMap);
    }

    public addCarrera_result() {
    }

    public addCarrera_result(
      long success,
      ThriftInputValidationException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCarrera_result(addCarrera_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ThriftInputValidationException(other.e);
      }
    }

    public addCarrera_result deepCopy() {
      return new addCarrera_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public addCarrera_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ThriftInputValidationException getE() {
      return this.e;
    }

    public addCarrera_result setE(ThriftInputValidationException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ThriftInputValidationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addCarrera_result)
        return this.equals((addCarrera_result)that);
      return false;
    }

    public boolean equals(addCarrera_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addCarrera_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addCarrera_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCarrera_resultStandardSchemeFactory implements SchemeFactory {
      public addCarrera_resultStandardScheme getScheme() {
        return new addCarrera_resultStandardScheme();
      }
    }

    private static class addCarrera_resultStandardScheme extends StandardScheme<addCarrera_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCarrera_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ThriftInputValidationException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCarrera_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCarrera_resultTupleSchemeFactory implements SchemeFactory {
      public addCarrera_resultTupleScheme getScheme() {
        return new addCarrera_resultTupleScheme();
      }
    }

    private static class addCarrera_resultTupleScheme extends TupleScheme<addCarrera_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCarrera_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCarrera_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ThriftInputValidationException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class findCarrera_args implements org.apache.thrift.TBase<findCarrera_args, findCarrera_args._Fields>, java.io.Serializable, Cloneable, Comparable<findCarrera_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCarrera_args");

    private static final org.apache.thrift.protocol.TField CARRERA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("carreraId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findCarrera_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findCarrera_argsTupleSchemeFactory());
    }

    public long carreraId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CARRERA_ID((short)1, "carreraId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CARRERA_ID
            return CARRERA_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CARRERAID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CARRERA_ID, new org.apache.thrift.meta_data.FieldMetaData("carreraId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCarrera_args.class, metaDataMap);
    }

    public findCarrera_args() {
    }

    public findCarrera_args(
      long carreraId)
    {
      this();
      this.carreraId = carreraId;
      setCarreraIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCarrera_args(findCarrera_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.carreraId = other.carreraId;
    }

    public findCarrera_args deepCopy() {
      return new findCarrera_args(this);
    }

    @Override
    public void clear() {
      setCarreraIdIsSet(false);
      this.carreraId = 0;
    }

    public long getCarreraId() {
      return this.carreraId;
    }

    public findCarrera_args setCarreraId(long carreraId) {
      this.carreraId = carreraId;
      setCarreraIdIsSet(true);
      return this;
    }

    public void unsetCarreraId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CARRERAID_ISSET_ID);
    }

    /** Returns true if field carreraId is set (has been assigned a value) and false otherwise */
    public boolean isSetCarreraId() {
      return EncodingUtils.testBit(__isset_bitfield, __CARRERAID_ISSET_ID);
    }

    public void setCarreraIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CARRERAID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CARRERA_ID:
        if (value == null) {
          unsetCarreraId();
        } else {
          setCarreraId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CARRERA_ID:
        return Long.valueOf(getCarreraId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CARRERA_ID:
        return isSetCarreraId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findCarrera_args)
        return this.equals((findCarrera_args)that);
      return false;
    }

    public boolean equals(findCarrera_args that) {
      if (that == null)
        return false;

      boolean this_present_carreraId = true;
      boolean that_present_carreraId = true;
      if (this_present_carreraId || that_present_carreraId) {
        if (!(this_present_carreraId && that_present_carreraId))
          return false;
        if (this.carreraId != that.carreraId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findCarrera_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCarreraId()).compareTo(other.isSetCarreraId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCarreraId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carreraId, other.carreraId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findCarrera_args(");
      boolean first = true;

      sb.append("carreraId:");
      sb.append(this.carreraId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCarrera_argsStandardSchemeFactory implements SchemeFactory {
      public findCarrera_argsStandardScheme getScheme() {
        return new findCarrera_argsStandardScheme();
      }
    }

    private static class findCarrera_argsStandardScheme extends StandardScheme<findCarrera_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCarrera_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CARRERA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.carreraId = iprot.readI64();
                struct.setCarreraIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCarrera_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CARRERA_ID_FIELD_DESC);
        oprot.writeI64(struct.carreraId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCarrera_argsTupleSchemeFactory implements SchemeFactory {
      public findCarrera_argsTupleScheme getScheme() {
        return new findCarrera_argsTupleScheme();
      }
    }

    private static class findCarrera_argsTupleScheme extends TupleScheme<findCarrera_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCarrera_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCarreraId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCarreraId()) {
          oprot.writeI64(struct.carreraId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCarrera_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.carreraId = iprot.readI64();
          struct.setCarreraIdIsSet(true);
        }
      }
    }

  }

  public static class findCarrera_result implements org.apache.thrift.TBase<findCarrera_result, findCarrera_result._Fields>, java.io.Serializable, Cloneable, Comparable<findCarrera_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCarrera_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findCarrera_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findCarrera_resultTupleSchemeFactory());
    }

    public ThriftCarreraDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCarreraDto.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCarrera_result.class, metaDataMap);
    }

    public findCarrera_result() {
    }

    public findCarrera_result(
      ThriftCarreraDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCarrera_result(findCarrera_result other) {
      if (other.isSetSuccess()) {
        this.success = new ThriftCarreraDto(other.success);
      }
    }

    public findCarrera_result deepCopy() {
      return new findCarrera_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ThriftCarreraDto getSuccess() {
      return this.success;
    }

    public findCarrera_result setSuccess(ThriftCarreraDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ThriftCarreraDto)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findCarrera_result)
        return this.equals((findCarrera_result)that);
      return false;
    }

    public boolean equals(findCarrera_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findCarrera_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findCarrera_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCarrera_resultStandardSchemeFactory implements SchemeFactory {
      public findCarrera_resultStandardScheme getScheme() {
        return new findCarrera_resultStandardScheme();
      }
    }

    private static class findCarrera_resultStandardScheme extends StandardScheme<findCarrera_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCarrera_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ThriftCarreraDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCarrera_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCarrera_resultTupleSchemeFactory implements SchemeFactory {
      public findCarrera_resultTupleScheme getScheme() {
        return new findCarrera_resultTupleScheme();
      }
    }

    private static class findCarrera_resultTupleScheme extends TupleScheme<findCarrera_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCarrera_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCarrera_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ThriftCarreraDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findCarreras_args implements org.apache.thrift.TBase<findCarreras_args, findCarreras_args._Fields>, java.io.Serializable, Cloneable, Comparable<findCarreras_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCarreras_args");

    private static final org.apache.thrift.protocol.TField FECHA_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("fechaMax", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CIUDAD_FIELD_DESC = new org.apache.thrift.protocol.TField("ciudad", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findCarreras_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findCarreras_argsTupleSchemeFactory());
    }

    public String fechaMax; // required
    public String ciudad; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FECHA_MAX((short)1, "fechaMax"),
      CIUDAD((short)2, "ciudad");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FECHA_MAX
            return FECHA_MAX;
          case 2: // CIUDAD
            return CIUDAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FECHA_MAX, new org.apache.thrift.meta_data.FieldMetaData("fechaMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CIUDAD, new org.apache.thrift.meta_data.FieldMetaData("ciudad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCarreras_args.class, metaDataMap);
    }

    public findCarreras_args() {
    }

    public findCarreras_args(
      String fechaMax,
      String ciudad)
    {
      this();
      this.fechaMax = fechaMax;
      this.ciudad = ciudad;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCarreras_args(findCarreras_args other) {
      if (other.isSetFechaMax()) {
        this.fechaMax = other.fechaMax;
      }
      if (other.isSetCiudad()) {
        this.ciudad = other.ciudad;
      }
    }

    public findCarreras_args deepCopy() {
      return new findCarreras_args(this);
    }

    @Override
    public void clear() {
      this.fechaMax = null;
      this.ciudad = null;
    }

    public String getFechaMax() {
      return this.fechaMax;
    }

    public findCarreras_args setFechaMax(String fechaMax) {
      this.fechaMax = fechaMax;
      return this;
    }

    public void unsetFechaMax() {
      this.fechaMax = null;
    }

    /** Returns true if field fechaMax is set (has been assigned a value) and false otherwise */
    public boolean isSetFechaMax() {
      return this.fechaMax != null;
    }

    public void setFechaMaxIsSet(boolean value) {
      if (!value) {
        this.fechaMax = null;
      }
    }

    public String getCiudad() {
      return this.ciudad;
    }

    public findCarreras_args setCiudad(String ciudad) {
      this.ciudad = ciudad;
      return this;
    }

    public void unsetCiudad() {
      this.ciudad = null;
    }

    /** Returns true if field ciudad is set (has been assigned a value) and false otherwise */
    public boolean isSetCiudad() {
      return this.ciudad != null;
    }

    public void setCiudadIsSet(boolean value) {
      if (!value) {
        this.ciudad = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FECHA_MAX:
        if (value == null) {
          unsetFechaMax();
        } else {
          setFechaMax((String)value);
        }
        break;

      case CIUDAD:
        if (value == null) {
          unsetCiudad();
        } else {
          setCiudad((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FECHA_MAX:
        return getFechaMax();

      case CIUDAD:
        return getCiudad();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FECHA_MAX:
        return isSetFechaMax();
      case CIUDAD:
        return isSetCiudad();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findCarreras_args)
        return this.equals((findCarreras_args)that);
      return false;
    }

    public boolean equals(findCarreras_args that) {
      if (that == null)
        return false;

      boolean this_present_fechaMax = true && this.isSetFechaMax();
      boolean that_present_fechaMax = true && that.isSetFechaMax();
      if (this_present_fechaMax || that_present_fechaMax) {
        if (!(this_present_fechaMax && that_present_fechaMax))
          return false;
        if (!this.fechaMax.equals(that.fechaMax))
          return false;
      }

      boolean this_present_ciudad = true && this.isSetCiudad();
      boolean that_present_ciudad = true && that.isSetCiudad();
      if (this_present_ciudad || that_present_ciudad) {
        if (!(this_present_ciudad && that_present_ciudad))
          return false;
        if (!this.ciudad.equals(that.ciudad))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findCarreras_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFechaMax()).compareTo(other.isSetFechaMax());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFechaMax()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fechaMax, other.fechaMax);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCiudad()).compareTo(other.isSetCiudad());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCiudad()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ciudad, other.ciudad);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findCarreras_args(");
      boolean first = true;

      sb.append("fechaMax:");
      if (this.fechaMax == null) {
        sb.append("null");
      } else {
        sb.append(this.fechaMax);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ciudad:");
      if (this.ciudad == null) {
        sb.append("null");
      } else {
        sb.append(this.ciudad);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCarreras_argsStandardSchemeFactory implements SchemeFactory {
      public findCarreras_argsStandardScheme getScheme() {
        return new findCarreras_argsStandardScheme();
      }
    }

    private static class findCarreras_argsStandardScheme extends StandardScheme<findCarreras_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCarreras_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FECHA_MAX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fechaMax = iprot.readString();
                struct.setFechaMaxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CIUDAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ciudad = iprot.readString();
                struct.setCiudadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCarreras_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fechaMax != null) {
          oprot.writeFieldBegin(FECHA_MAX_FIELD_DESC);
          oprot.writeString(struct.fechaMax);
          oprot.writeFieldEnd();
        }
        if (struct.ciudad != null) {
          oprot.writeFieldBegin(CIUDAD_FIELD_DESC);
          oprot.writeString(struct.ciudad);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCarreras_argsTupleSchemeFactory implements SchemeFactory {
      public findCarreras_argsTupleScheme getScheme() {
        return new findCarreras_argsTupleScheme();
      }
    }

    private static class findCarreras_argsTupleScheme extends TupleScheme<findCarreras_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCarreras_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFechaMax()) {
          optionals.set(0);
        }
        if (struct.isSetCiudad()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFechaMax()) {
          oprot.writeString(struct.fechaMax);
        }
        if (struct.isSetCiudad()) {
          oprot.writeString(struct.ciudad);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCarreras_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fechaMax = iprot.readString();
          struct.setFechaMaxIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ciudad = iprot.readString();
          struct.setCiudadIsSet(true);
        }
      }
    }

  }

  public static class findCarreras_result implements org.apache.thrift.TBase<findCarreras_result, findCarreras_result._Fields>, java.io.Serializable, Cloneable, Comparable<findCarreras_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCarreras_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findCarreras_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findCarreras_resultTupleSchemeFactory());
    }

    public List<ThriftCarreraDto> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCarreraDto.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCarreras_result.class, metaDataMap);
    }

    public findCarreras_result() {
    }

    public findCarreras_result(
      List<ThriftCarreraDto> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCarreras_result(findCarreras_result other) {
      if (other.isSetSuccess()) {
        List<ThriftCarreraDto> __this__success = new ArrayList<ThriftCarreraDto>(other.success.size());
        for (ThriftCarreraDto other_element : other.success) {
          __this__success.add(new ThriftCarreraDto(other_element));
        }
        this.success = __this__success;
      }
    }

    public findCarreras_result deepCopy() {
      return new findCarreras_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ThriftCarreraDto> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftCarreraDto elem) {
      if (this.success == null) {
        this.success = new ArrayList<ThriftCarreraDto>();
      }
      this.success.add(elem);
    }

    public List<ThriftCarreraDto> getSuccess() {
      return this.success;
    }

    public findCarreras_result setSuccess(List<ThriftCarreraDto> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ThriftCarreraDto>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findCarreras_result)
        return this.equals((findCarreras_result)that);
      return false;
    }

    public boolean equals(findCarreras_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findCarreras_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findCarreras_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCarreras_resultStandardSchemeFactory implements SchemeFactory {
      public findCarreras_resultStandardScheme getScheme() {
        return new findCarreras_resultStandardScheme();
      }
    }

    private static class findCarreras_resultStandardScheme extends StandardScheme<findCarreras_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCarreras_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<ThriftCarreraDto>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    ThriftCarreraDto _elem2;
                    _elem2 = new ThriftCarreraDto();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCarreras_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftCarreraDto _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCarreras_resultTupleSchemeFactory implements SchemeFactory {
      public findCarreras_resultTupleScheme getScheme() {
        return new findCarreras_resultTupleScheme();
      }
    }

    private static class findCarreras_resultTupleScheme extends TupleScheme<findCarreras_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCarreras_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftCarreraDto _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCarreras_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ThriftCarreraDto>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              ThriftCarreraDto _elem7;
              _elem7 = new ThriftCarreraDto();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addInscripcion_args implements org.apache.thrift.TBase<addInscripcion_args, addInscripcion_args._Fields>, java.io.Serializable, Cloneable, Comparable<addInscripcion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addInscripcion_args");

    private static final org.apache.thrift.protocol.TField INSCRIPCION_FIELD_DESC = new org.apache.thrift.protocol.TField("inscripcion", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addInscripcion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addInscripcion_argsTupleSchemeFactory());
    }

    public ThriftInscripcionDto inscripcion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSCRIPCION((short)1, "inscripcion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSCRIPCION
            return INSCRIPCION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSCRIPCION, new org.apache.thrift.meta_data.FieldMetaData("inscripcion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftInscripcionDto.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addInscripcion_args.class, metaDataMap);
    }

    public addInscripcion_args() {
    }

    public addInscripcion_args(
      ThriftInscripcionDto inscripcion)
    {
      this();
      this.inscripcion = inscripcion;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addInscripcion_args(addInscripcion_args other) {
      if (other.isSetInscripcion()) {
        this.inscripcion = new ThriftInscripcionDto(other.inscripcion);
      }
    }

    public addInscripcion_args deepCopy() {
      return new addInscripcion_args(this);
    }

    @Override
    public void clear() {
      this.inscripcion = null;
    }

    public ThriftInscripcionDto getInscripcion() {
      return this.inscripcion;
    }

    public addInscripcion_args setInscripcion(ThriftInscripcionDto inscripcion) {
      this.inscripcion = inscripcion;
      return this;
    }

    public void unsetInscripcion() {
      this.inscripcion = null;
    }

    /** Returns true if field inscripcion is set (has been assigned a value) and false otherwise */
    public boolean isSetInscripcion() {
      return this.inscripcion != null;
    }

    public void setInscripcionIsSet(boolean value) {
      if (!value) {
        this.inscripcion = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INSCRIPCION:
        if (value == null) {
          unsetInscripcion();
        } else {
          setInscripcion((ThriftInscripcionDto)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INSCRIPCION:
        return getInscripcion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INSCRIPCION:
        return isSetInscripcion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addInscripcion_args)
        return this.equals((addInscripcion_args)that);
      return false;
    }

    public boolean equals(addInscripcion_args that) {
      if (that == null)
        return false;

      boolean this_present_inscripcion = true && this.isSetInscripcion();
      boolean that_present_inscripcion = true && that.isSetInscripcion();
      if (this_present_inscripcion || that_present_inscripcion) {
        if (!(this_present_inscripcion && that_present_inscripcion))
          return false;
        if (!this.inscripcion.equals(that.inscripcion))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addInscripcion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInscripcion()).compareTo(other.isSetInscripcion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInscripcion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inscripcion, other.inscripcion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addInscripcion_args(");
      boolean first = true;

      sb.append("inscripcion:");
      if (this.inscripcion == null) {
        sb.append("null");
      } else {
        sb.append(this.inscripcion);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (inscripcion != null) {
        inscripcion.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addInscripcion_argsStandardSchemeFactory implements SchemeFactory {
      public addInscripcion_argsStandardScheme getScheme() {
        return new addInscripcion_argsStandardScheme();
      }
    }

    private static class addInscripcion_argsStandardScheme extends StandardScheme<addInscripcion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addInscripcion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSCRIPCION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.inscripcion = new ThriftInscripcionDto();
                struct.inscripcion.read(iprot);
                struct.setInscripcionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addInscripcion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inscripcion != null) {
          oprot.writeFieldBegin(INSCRIPCION_FIELD_DESC);
          struct.inscripcion.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addInscripcion_argsTupleSchemeFactory implements SchemeFactory {
      public addInscripcion_argsTupleScheme getScheme() {
        return new addInscripcion_argsTupleScheme();
      }
    }

    private static class addInscripcion_argsTupleScheme extends TupleScheme<addInscripcion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addInscripcion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInscripcion()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInscripcion()) {
          struct.inscripcion.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addInscripcion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.inscripcion = new ThriftInscripcionDto();
          struct.inscripcion.read(iprot);
          struct.setInscripcionIsSet(true);
        }
      }
    }

  }

  public static class addInscripcion_result implements org.apache.thrift.TBase<addInscripcion_result, addInscripcion_result._Fields>, java.io.Serializable, Cloneable, Comparable<addInscripcion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addInscripcion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EE_FIELD_DESC = new org.apache.thrift.protocol.TField("ee", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField EEE_FIELD_DESC = new org.apache.thrift.protocol.TField("eee", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField EEEE_FIELD_DESC = new org.apache.thrift.protocol.TField("eeee", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField EEEEE_FIELD_DESC = new org.apache.thrift.protocol.TField("eeeee", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addInscripcion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addInscripcion_resultTupleSchemeFactory());
    }

    public long success; // required
    public ThriftInputValidationException e; // required
    public ThriftInstanceNotFoundException ee; // required
    public ThriftMaxCapacityException eee; // required
    public ThriftOutOfTimeException eeee; // required
    public ThriftAlreadyRegisteredException eeeee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e"),
      EE((short)2, "ee"),
      EEE((short)3, "eee"),
      EEEE((short)4, "eeee"),
      EEEEE((short)5, "eeeee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          case 2: // EE
            return EE;
          case 3: // EEE
            return EEE;
          case 4: // EEEE
            return EEEE;
          case 5: // EEEEE
            return EEEEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EE, new org.apache.thrift.meta_data.FieldMetaData("ee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EEE, new org.apache.thrift.meta_data.FieldMetaData("eee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EEEE, new org.apache.thrift.meta_data.FieldMetaData("eeee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EEEEE, new org.apache.thrift.meta_data.FieldMetaData("eeeee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addInscripcion_result.class, metaDataMap);
    }

    public addInscripcion_result() {
    }

    public addInscripcion_result(
      long success,
      ThriftInputValidationException e,
      ThriftInstanceNotFoundException ee,
      ThriftMaxCapacityException eee,
      ThriftOutOfTimeException eeee,
      ThriftAlreadyRegisteredException eeeee)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
      this.ee = ee;
      this.eee = eee;
      this.eeee = eeee;
      this.eeeee = eeeee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addInscripcion_result(addInscripcion_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ThriftInputValidationException(other.e);
      }
      if (other.isSetEe()) {
        this.ee = new ThriftInstanceNotFoundException(other.ee);
      }
      if (other.isSetEee()) {
        this.eee = new ThriftMaxCapacityException(other.eee);
      }
      if (other.isSetEeee()) {
        this.eeee = new ThriftOutOfTimeException(other.eeee);
      }
      if (other.isSetEeeee()) {
        this.eeeee = new ThriftAlreadyRegisteredException(other.eeeee);
      }
    }

    public addInscripcion_result deepCopy() {
      return new addInscripcion_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
      this.ee = null;
      this.eee = null;
      this.eeee = null;
      this.eeeee = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public addInscripcion_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ThriftInputValidationException getE() {
      return this.e;
    }

    public addInscripcion_result setE(ThriftInputValidationException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public ThriftInstanceNotFoundException getEe() {
      return this.ee;
    }

    public addInscripcion_result setEe(ThriftInstanceNotFoundException ee) {
      this.ee = ee;
      return this;
    }

    public void unsetEe() {
      this.ee = null;
    }

    /** Returns true if field ee is set (has been assigned a value) and false otherwise */
    public boolean isSetEe() {
      return this.ee != null;
    }

    public void setEeIsSet(boolean value) {
      if (!value) {
        this.ee = null;
      }
    }

    public ThriftMaxCapacityException getEee() {
      return this.eee;
    }

    public addInscripcion_result setEee(ThriftMaxCapacityException eee) {
      this.eee = eee;
      return this;
    }

    public void unsetEee() {
      this.eee = null;
    }

    /** Returns true if field eee is set (has been assigned a value) and false otherwise */
    public boolean isSetEee() {
      return this.eee != null;
    }

    public void setEeeIsSet(boolean value) {
      if (!value) {
        this.eee = null;
      }
    }

    public ThriftOutOfTimeException getEeee() {
      return this.eeee;
    }

    public addInscripcion_result setEeee(ThriftOutOfTimeException eeee) {
      this.eeee = eeee;
      return this;
    }

    public void unsetEeee() {
      this.eeee = null;
    }

    /** Returns true if field eeee is set (has been assigned a value) and false otherwise */
    public boolean isSetEeee() {
      return this.eeee != null;
    }

    public void setEeeeIsSet(boolean value) {
      if (!value) {
        this.eeee = null;
      }
    }

    public ThriftAlreadyRegisteredException getEeeee() {
      return this.eeeee;
    }

    public addInscripcion_result setEeeee(ThriftAlreadyRegisteredException eeeee) {
      this.eeeee = eeeee;
      return this;
    }

    public void unsetEeeee() {
      this.eeeee = null;
    }

    /** Returns true if field eeeee is set (has been assigned a value) and false otherwise */
    public boolean isSetEeeee() {
      return this.eeeee != null;
    }

    public void setEeeeeIsSet(boolean value) {
      if (!value) {
        this.eeeee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ThriftInputValidationException)value);
        }
        break;

      case EE:
        if (value == null) {
          unsetEe();
        } else {
          setEe((ThriftInstanceNotFoundException)value);
        }
        break;

      case EEE:
        if (value == null) {
          unsetEee();
        } else {
          setEee((ThriftMaxCapacityException)value);
        }
        break;

      case EEEE:
        if (value == null) {
          unsetEeee();
        } else {
          setEeee((ThriftOutOfTimeException)value);
        }
        break;

      case EEEEE:
        if (value == null) {
          unsetEeeee();
        } else {
          setEeeee((ThriftAlreadyRegisteredException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case E:
        return getE();

      case EE:
        return getEe();

      case EEE:
        return getEee();

      case EEEE:
        return getEeee();

      case EEEEE:
        return getEeeee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      case EE:
        return isSetEe();
      case EEE:
        return isSetEee();
      case EEEE:
        return isSetEeee();
      case EEEEE:
        return isSetEeeee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addInscripcion_result)
        return this.equals((addInscripcion_result)that);
      return false;
    }

    public boolean equals(addInscripcion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      boolean this_present_ee = true && this.isSetEe();
      boolean that_present_ee = true && that.isSetEe();
      if (this_present_ee || that_present_ee) {
        if (!(this_present_ee && that_present_ee))
          return false;
        if (!this.ee.equals(that.ee))
          return false;
      }

      boolean this_present_eee = true && this.isSetEee();
      boolean that_present_eee = true && that.isSetEee();
      if (this_present_eee || that_present_eee) {
        if (!(this_present_eee && that_present_eee))
          return false;
        if (!this.eee.equals(that.eee))
          return false;
      }

      boolean this_present_eeee = true && this.isSetEeee();
      boolean that_present_eeee = true && that.isSetEeee();
      if (this_present_eeee || that_present_eeee) {
        if (!(this_present_eeee && that_present_eeee))
          return false;
        if (!this.eeee.equals(that.eeee))
          return false;
      }

      boolean this_present_eeeee = true && this.isSetEeeee();
      boolean that_present_eeeee = true && that.isSetEeeee();
      if (this_present_eeeee || that_present_eeeee) {
        if (!(this_present_eeeee && that_present_eeeee))
          return false;
        if (!this.eeeee.equals(that.eeeee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addInscripcion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEe()).compareTo(other.isSetEe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ee, other.ee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEee()).compareTo(other.isSetEee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eee, other.eee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEeee()).compareTo(other.isSetEeee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEeee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eeee, other.eeee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEeeee()).compareTo(other.isSetEeeee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEeeee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eeeee, other.eeeee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addInscripcion_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ee:");
      if (this.ee == null) {
        sb.append("null");
      } else {
        sb.append(this.ee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eee:");
      if (this.eee == null) {
        sb.append("null");
      } else {
        sb.append(this.eee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eeee:");
      if (this.eeee == null) {
        sb.append("null");
      } else {
        sb.append(this.eeee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eeeee:");
      if (this.eeeee == null) {
        sb.append("null");
      } else {
        sb.append(this.eeeee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addInscripcion_resultStandardSchemeFactory implements SchemeFactory {
      public addInscripcion_resultStandardScheme getScheme() {
        return new addInscripcion_resultStandardScheme();
      }
    }

    private static class addInscripcion_resultStandardScheme extends StandardScheme<addInscripcion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addInscripcion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ThriftInputValidationException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ee = new ThriftInstanceNotFoundException();
                struct.ee.read(iprot);
                struct.setEeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eee = new ThriftMaxCapacityException();
                struct.eee.read(iprot);
                struct.setEeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EEEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eeee = new ThriftOutOfTimeException();
                struct.eeee.read(iprot);
                struct.setEeeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EEEEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eeeee = new ThriftAlreadyRegisteredException();
                struct.eeeee.read(iprot);
                struct.setEeeeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addInscripcion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ee != null) {
          oprot.writeFieldBegin(EE_FIELD_DESC);
          struct.ee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eee != null) {
          oprot.writeFieldBegin(EEE_FIELD_DESC);
          struct.eee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eeee != null) {
          oprot.writeFieldBegin(EEEE_FIELD_DESC);
          struct.eeee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eeeee != null) {
          oprot.writeFieldBegin(EEEEE_FIELD_DESC);
          struct.eeeee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addInscripcion_resultTupleSchemeFactory implements SchemeFactory {
      public addInscripcion_resultTupleScheme getScheme() {
        return new addInscripcion_resultTupleScheme();
      }
    }

    private static class addInscripcion_resultTupleScheme extends TupleScheme<addInscripcion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addInscripcion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        if (struct.isSetEe()) {
          optionals.set(2);
        }
        if (struct.isSetEee()) {
          optionals.set(3);
        }
        if (struct.isSetEeee()) {
          optionals.set(4);
        }
        if (struct.isSetEeeee()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
        if (struct.isSetEe()) {
          struct.ee.write(oprot);
        }
        if (struct.isSetEee()) {
          struct.eee.write(oprot);
        }
        if (struct.isSetEeee()) {
          struct.eeee.write(oprot);
        }
        if (struct.isSetEeeee()) {
          struct.eeeee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addInscripcion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ThriftInputValidationException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ee = new ThriftInstanceNotFoundException();
          struct.ee.read(iprot);
          struct.setEeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.eee = new ThriftMaxCapacityException();
          struct.eee.read(iprot);
          struct.setEeeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.eeee = new ThriftOutOfTimeException();
          struct.eeee.read(iprot);
          struct.setEeeeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.eeeee = new ThriftAlreadyRegisteredException();
          struct.eeeee.read(iprot);
          struct.setEeeeeIsSet(true);
        }
      }
    }

  }

  public static class recogerDorsal_args implements org.apache.thrift.TBase<recogerDorsal_args, recogerDorsal_args._Fields>, java.io.Serializable, Cloneable, Comparable<recogerDorsal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recogerDorsal_args");

    private static final org.apache.thrift.protocol.TField INSCRIPCION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inscripcionId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TARJETA_FIELD_DESC = new org.apache.thrift.protocol.TField("tarjeta", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recogerDorsal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recogerDorsal_argsTupleSchemeFactory());
    }

    public long inscripcionId; // required
    public String tarjeta; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSCRIPCION_ID((short)1, "inscripcionId"),
      TARJETA((short)2, "tarjeta");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSCRIPCION_ID
            return INSCRIPCION_ID;
          case 2: // TARJETA
            return TARJETA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INSCRIPCIONID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSCRIPCION_ID, new org.apache.thrift.meta_data.FieldMetaData("inscripcionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TARJETA, new org.apache.thrift.meta_data.FieldMetaData("tarjeta", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recogerDorsal_args.class, metaDataMap);
    }

    public recogerDorsal_args() {
    }

    public recogerDorsal_args(
      long inscripcionId,
      String tarjeta)
    {
      this();
      this.inscripcionId = inscripcionId;
      setInscripcionIdIsSet(true);
      this.tarjeta = tarjeta;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recogerDorsal_args(recogerDorsal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.inscripcionId = other.inscripcionId;
      if (other.isSetTarjeta()) {
        this.tarjeta = other.tarjeta;
      }
    }

    public recogerDorsal_args deepCopy() {
      return new recogerDorsal_args(this);
    }

    @Override
    public void clear() {
      setInscripcionIdIsSet(false);
      this.inscripcionId = 0;
      this.tarjeta = null;
    }

    public long getInscripcionId() {
      return this.inscripcionId;
    }

    public recogerDorsal_args setInscripcionId(long inscripcionId) {
      this.inscripcionId = inscripcionId;
      setInscripcionIdIsSet(true);
      return this;
    }

    public void unsetInscripcionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSCRIPCIONID_ISSET_ID);
    }

    /** Returns true if field inscripcionId is set (has been assigned a value) and false otherwise */
    public boolean isSetInscripcionId() {
      return EncodingUtils.testBit(__isset_bitfield, __INSCRIPCIONID_ISSET_ID);
    }

    public void setInscripcionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSCRIPCIONID_ISSET_ID, value);
    }

    public String getTarjeta() {
      return this.tarjeta;
    }

    public recogerDorsal_args setTarjeta(String tarjeta) {
      this.tarjeta = tarjeta;
      return this;
    }

    public void unsetTarjeta() {
      this.tarjeta = null;
    }

    /** Returns true if field tarjeta is set (has been assigned a value) and false otherwise */
    public boolean isSetTarjeta() {
      return this.tarjeta != null;
    }

    public void setTarjetaIsSet(boolean value) {
      if (!value) {
        this.tarjeta = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INSCRIPCION_ID:
        if (value == null) {
          unsetInscripcionId();
        } else {
          setInscripcionId((Long)value);
        }
        break;

      case TARJETA:
        if (value == null) {
          unsetTarjeta();
        } else {
          setTarjeta((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INSCRIPCION_ID:
        return Long.valueOf(getInscripcionId());

      case TARJETA:
        return getTarjeta();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INSCRIPCION_ID:
        return isSetInscripcionId();
      case TARJETA:
        return isSetTarjeta();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recogerDorsal_args)
        return this.equals((recogerDorsal_args)that);
      return false;
    }

    public boolean equals(recogerDorsal_args that) {
      if (that == null)
        return false;

      boolean this_present_inscripcionId = true;
      boolean that_present_inscripcionId = true;
      if (this_present_inscripcionId || that_present_inscripcionId) {
        if (!(this_present_inscripcionId && that_present_inscripcionId))
          return false;
        if (this.inscripcionId != that.inscripcionId)
          return false;
      }

      boolean this_present_tarjeta = true && this.isSetTarjeta();
      boolean that_present_tarjeta = true && that.isSetTarjeta();
      if (this_present_tarjeta || that_present_tarjeta) {
        if (!(this_present_tarjeta && that_present_tarjeta))
          return false;
        if (!this.tarjeta.equals(that.tarjeta))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(recogerDorsal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInscripcionId()).compareTo(other.isSetInscripcionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInscripcionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inscripcionId, other.inscripcionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTarjeta()).compareTo(other.isSetTarjeta());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTarjeta()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tarjeta, other.tarjeta);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recogerDorsal_args(");
      boolean first = true;

      sb.append("inscripcionId:");
      sb.append(this.inscripcionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tarjeta:");
      if (this.tarjeta == null) {
        sb.append("null");
      } else {
        sb.append(this.tarjeta);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recogerDorsal_argsStandardSchemeFactory implements SchemeFactory {
      public recogerDorsal_argsStandardScheme getScheme() {
        return new recogerDorsal_argsStandardScheme();
      }
    }

    private static class recogerDorsal_argsStandardScheme extends StandardScheme<recogerDorsal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recogerDorsal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSCRIPCION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.inscripcionId = iprot.readI64();
                struct.setInscripcionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TARJETA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tarjeta = iprot.readString();
                struct.setTarjetaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recogerDorsal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(INSCRIPCION_ID_FIELD_DESC);
        oprot.writeI64(struct.inscripcionId);
        oprot.writeFieldEnd();
        if (struct.tarjeta != null) {
          oprot.writeFieldBegin(TARJETA_FIELD_DESC);
          oprot.writeString(struct.tarjeta);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recogerDorsal_argsTupleSchemeFactory implements SchemeFactory {
      public recogerDorsal_argsTupleScheme getScheme() {
        return new recogerDorsal_argsTupleScheme();
      }
    }

    private static class recogerDorsal_argsTupleScheme extends TupleScheme<recogerDorsal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recogerDorsal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInscripcionId()) {
          optionals.set(0);
        }
        if (struct.isSetTarjeta()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInscripcionId()) {
          oprot.writeI64(struct.inscripcionId);
        }
        if (struct.isSetTarjeta()) {
          oprot.writeString(struct.tarjeta);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recogerDorsal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.inscripcionId = iprot.readI64();
          struct.setInscripcionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tarjeta = iprot.readString();
          struct.setTarjetaIsSet(true);
        }
      }
    }

  }

  public static class recogerDorsal_result implements org.apache.thrift.TBase<recogerDorsal_result, recogerDorsal_result._Fields>, java.io.Serializable, Cloneable, Comparable<recogerDorsal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recogerDorsal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EE_FIELD_DESC = new org.apache.thrift.protocol.TField("ee", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField EEE_FIELD_DESC = new org.apache.thrift.protocol.TField("eee", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField EEEE_FIELD_DESC = new org.apache.thrift.protocol.TField("eeee", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recogerDorsal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recogerDorsal_resultTupleSchemeFactory());
    }

    public int success; // required
    public ThriftInputValidationException e; // required
    public ThriftInstanceNotFoundException ee; // required
    public ThriftClientDorsalEntregadoException eee; // required
    public ThriftClientTarjetaNotEqualException eeee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e"),
      EE((short)2, "ee"),
      EEE((short)3, "eee"),
      EEEE((short)4, "eeee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          case 2: // EE
            return EE;
          case 3: // EEE
            return EEE;
          case 4: // EEEE
            return EEEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EE, new org.apache.thrift.meta_data.FieldMetaData("ee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EEE, new org.apache.thrift.meta_data.FieldMetaData("eee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EEEE, new org.apache.thrift.meta_data.FieldMetaData("eeee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recogerDorsal_result.class, metaDataMap);
    }

    public recogerDorsal_result() {
    }

    public recogerDorsal_result(
      int success,
      ThriftInputValidationException e,
      ThriftInstanceNotFoundException ee,
      ThriftClientDorsalEntregadoException eee,
      ThriftClientTarjetaNotEqualException eeee)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
      this.ee = ee;
      this.eee = eee;
      this.eeee = eeee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recogerDorsal_result(recogerDorsal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ThriftInputValidationException(other.e);
      }
      if (other.isSetEe()) {
        this.ee = new ThriftInstanceNotFoundException(other.ee);
      }
      if (other.isSetEee()) {
        this.eee = new ThriftClientDorsalEntregadoException(other.eee);
      }
      if (other.isSetEeee()) {
        this.eeee = new ThriftClientTarjetaNotEqualException(other.eeee);
      }
    }

    public recogerDorsal_result deepCopy() {
      return new recogerDorsal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
      this.ee = null;
      this.eee = null;
      this.eeee = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public recogerDorsal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ThriftInputValidationException getE() {
      return this.e;
    }

    public recogerDorsal_result setE(ThriftInputValidationException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public ThriftInstanceNotFoundException getEe() {
      return this.ee;
    }

    public recogerDorsal_result setEe(ThriftInstanceNotFoundException ee) {
      this.ee = ee;
      return this;
    }

    public void unsetEe() {
      this.ee = null;
    }

    /** Returns true if field ee is set (has been assigned a value) and false otherwise */
    public boolean isSetEe() {
      return this.ee != null;
    }

    public void setEeIsSet(boolean value) {
      if (!value) {
        this.ee = null;
      }
    }

    public ThriftClientDorsalEntregadoException getEee() {
      return this.eee;
    }

    public recogerDorsal_result setEee(ThriftClientDorsalEntregadoException eee) {
      this.eee = eee;
      return this;
    }

    public void unsetEee() {
      this.eee = null;
    }

    /** Returns true if field eee is set (has been assigned a value) and false otherwise */
    public boolean isSetEee() {
      return this.eee != null;
    }

    public void setEeeIsSet(boolean value) {
      if (!value) {
        this.eee = null;
      }
    }

    public ThriftClientTarjetaNotEqualException getEeee() {
      return this.eeee;
    }

    public recogerDorsal_result setEeee(ThriftClientTarjetaNotEqualException eeee) {
      this.eeee = eeee;
      return this;
    }

    public void unsetEeee() {
      this.eeee = null;
    }

    /** Returns true if field eeee is set (has been assigned a value) and false otherwise */
    public boolean isSetEeee() {
      return this.eeee != null;
    }

    public void setEeeeIsSet(boolean value) {
      if (!value) {
        this.eeee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ThriftInputValidationException)value);
        }
        break;

      case EE:
        if (value == null) {
          unsetEe();
        } else {
          setEe((ThriftInstanceNotFoundException)value);
        }
        break;

      case EEE:
        if (value == null) {
          unsetEee();
        } else {
          setEee((ThriftClientDorsalEntregadoException)value);
        }
        break;

      case EEEE:
        if (value == null) {
          unsetEeee();
        } else {
          setEeee((ThriftClientTarjetaNotEqualException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      case EE:
        return getEe();

      case EEE:
        return getEee();

      case EEEE:
        return getEeee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      case EE:
        return isSetEe();
      case EEE:
        return isSetEee();
      case EEEE:
        return isSetEeee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recogerDorsal_result)
        return this.equals((recogerDorsal_result)that);
      return false;
    }

    public boolean equals(recogerDorsal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      boolean this_present_ee = true && this.isSetEe();
      boolean that_present_ee = true && that.isSetEe();
      if (this_present_ee || that_present_ee) {
        if (!(this_present_ee && that_present_ee))
          return false;
        if (!this.ee.equals(that.ee))
          return false;
      }

      boolean this_present_eee = true && this.isSetEee();
      boolean that_present_eee = true && that.isSetEee();
      if (this_present_eee || that_present_eee) {
        if (!(this_present_eee && that_present_eee))
          return false;
        if (!this.eee.equals(that.eee))
          return false;
      }

      boolean this_present_eeee = true && this.isSetEeee();
      boolean that_present_eeee = true && that.isSetEeee();
      if (this_present_eeee || that_present_eeee) {
        if (!(this_present_eeee && that_present_eeee))
          return false;
        if (!this.eeee.equals(that.eeee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(recogerDorsal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEe()).compareTo(other.isSetEe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ee, other.ee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEee()).compareTo(other.isSetEee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eee, other.eee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEeee()).compareTo(other.isSetEeee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEeee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eeee, other.eeee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recogerDorsal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ee:");
      if (this.ee == null) {
        sb.append("null");
      } else {
        sb.append(this.ee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eee:");
      if (this.eee == null) {
        sb.append("null");
      } else {
        sb.append(this.eee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eeee:");
      if (this.eeee == null) {
        sb.append("null");
      } else {
        sb.append(this.eeee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recogerDorsal_resultStandardSchemeFactory implements SchemeFactory {
      public recogerDorsal_resultStandardScheme getScheme() {
        return new recogerDorsal_resultStandardScheme();
      }
    }

    private static class recogerDorsal_resultStandardScheme extends StandardScheme<recogerDorsal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recogerDorsal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ThriftInputValidationException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ee = new ThriftInstanceNotFoundException();
                struct.ee.read(iprot);
                struct.setEeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eee = new ThriftClientDorsalEntregadoException();
                struct.eee.read(iprot);
                struct.setEeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EEEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eeee = new ThriftClientTarjetaNotEqualException();
                struct.eeee.read(iprot);
                struct.setEeeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recogerDorsal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ee != null) {
          oprot.writeFieldBegin(EE_FIELD_DESC);
          struct.ee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eee != null) {
          oprot.writeFieldBegin(EEE_FIELD_DESC);
          struct.eee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eeee != null) {
          oprot.writeFieldBegin(EEEE_FIELD_DESC);
          struct.eeee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recogerDorsal_resultTupleSchemeFactory implements SchemeFactory {
      public recogerDorsal_resultTupleScheme getScheme() {
        return new recogerDorsal_resultTupleScheme();
      }
    }

    private static class recogerDorsal_resultTupleScheme extends TupleScheme<recogerDorsal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recogerDorsal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        if (struct.isSetEe()) {
          optionals.set(2);
        }
        if (struct.isSetEee()) {
          optionals.set(3);
        }
        if (struct.isSetEeee()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
        if (struct.isSetEe()) {
          struct.ee.write(oprot);
        }
        if (struct.isSetEee()) {
          struct.eee.write(oprot);
        }
        if (struct.isSetEeee()) {
          struct.eeee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recogerDorsal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ThriftInputValidationException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ee = new ThriftInstanceNotFoundException();
          struct.ee.read(iprot);
          struct.setEeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.eee = new ThriftClientDorsalEntregadoException();
          struct.eee.read(iprot);
          struct.setEeeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.eeee = new ThriftClientTarjetaNotEqualException();
          struct.eeee.read(iprot);
          struct.setEeeeIsSet(true);
        }
      }
    }

  }

  public static class findInscripcion_args implements org.apache.thrift.TBase<findInscripcion_args, findInscripcion_args._Fields>, java.io.Serializable, Cloneable, Comparable<findInscripcion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findInscripcion_args");

    private static final org.apache.thrift.protocol.TField INSCRIPCION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inscripcionId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findInscripcion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findInscripcion_argsTupleSchemeFactory());
    }

    public long inscripcionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSCRIPCION_ID((short)1, "inscripcionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSCRIPCION_ID
            return INSCRIPCION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INSCRIPCIONID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSCRIPCION_ID, new org.apache.thrift.meta_data.FieldMetaData("inscripcionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findInscripcion_args.class, metaDataMap);
    }

    public findInscripcion_args() {
    }

    public findInscripcion_args(
      long inscripcionId)
    {
      this();
      this.inscripcionId = inscripcionId;
      setInscripcionIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findInscripcion_args(findInscripcion_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.inscripcionId = other.inscripcionId;
    }

    public findInscripcion_args deepCopy() {
      return new findInscripcion_args(this);
    }

    @Override
    public void clear() {
      setInscripcionIdIsSet(false);
      this.inscripcionId = 0;
    }

    public long getInscripcionId() {
      return this.inscripcionId;
    }

    public findInscripcion_args setInscripcionId(long inscripcionId) {
      this.inscripcionId = inscripcionId;
      setInscripcionIdIsSet(true);
      return this;
    }

    public void unsetInscripcionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSCRIPCIONID_ISSET_ID);
    }

    /** Returns true if field inscripcionId is set (has been assigned a value) and false otherwise */
    public boolean isSetInscripcionId() {
      return EncodingUtils.testBit(__isset_bitfield, __INSCRIPCIONID_ISSET_ID);
    }

    public void setInscripcionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSCRIPCIONID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INSCRIPCION_ID:
        if (value == null) {
          unsetInscripcionId();
        } else {
          setInscripcionId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INSCRIPCION_ID:
        return Long.valueOf(getInscripcionId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INSCRIPCION_ID:
        return isSetInscripcionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findInscripcion_args)
        return this.equals((findInscripcion_args)that);
      return false;
    }

    public boolean equals(findInscripcion_args that) {
      if (that == null)
        return false;

      boolean this_present_inscripcionId = true;
      boolean that_present_inscripcionId = true;
      if (this_present_inscripcionId || that_present_inscripcionId) {
        if (!(this_present_inscripcionId && that_present_inscripcionId))
          return false;
        if (this.inscripcionId != that.inscripcionId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findInscripcion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInscripcionId()).compareTo(other.isSetInscripcionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInscripcionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inscripcionId, other.inscripcionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findInscripcion_args(");
      boolean first = true;

      sb.append("inscripcionId:");
      sb.append(this.inscripcionId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findInscripcion_argsStandardSchemeFactory implements SchemeFactory {
      public findInscripcion_argsStandardScheme getScheme() {
        return new findInscripcion_argsStandardScheme();
      }
    }

    private static class findInscripcion_argsStandardScheme extends StandardScheme<findInscripcion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findInscripcion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSCRIPCION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.inscripcionId = iprot.readI64();
                struct.setInscripcionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findInscripcion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(INSCRIPCION_ID_FIELD_DESC);
        oprot.writeI64(struct.inscripcionId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findInscripcion_argsTupleSchemeFactory implements SchemeFactory {
      public findInscripcion_argsTupleScheme getScheme() {
        return new findInscripcion_argsTupleScheme();
      }
    }

    private static class findInscripcion_argsTupleScheme extends TupleScheme<findInscripcion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findInscripcion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInscripcionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInscripcionId()) {
          oprot.writeI64(struct.inscripcionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findInscripcion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.inscripcionId = iprot.readI64();
          struct.setInscripcionIdIsSet(true);
        }
      }
    }

  }

  public static class findInscripcion_result implements org.apache.thrift.TBase<findInscripcion_result, findInscripcion_result._Fields>, java.io.Serializable, Cloneable, Comparable<findInscripcion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findInscripcion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findInscripcion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findInscripcion_resultTupleSchemeFactory());
    }

    public ThriftInscripcionDto success; // required
    public ThriftInstanceNotFoundException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftInscripcionDto.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findInscripcion_result.class, metaDataMap);
    }

    public findInscripcion_result() {
    }

    public findInscripcion_result(
      ThriftInscripcionDto success,
      ThriftInstanceNotFoundException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findInscripcion_result(findInscripcion_result other) {
      if (other.isSetSuccess()) {
        this.success = new ThriftInscripcionDto(other.success);
      }
      if (other.isSetE()) {
        this.e = new ThriftInstanceNotFoundException(other.e);
      }
    }

    public findInscripcion_result deepCopy() {
      return new findInscripcion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ThriftInscripcionDto getSuccess() {
      return this.success;
    }

    public findInscripcion_result setSuccess(ThriftInscripcionDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftInstanceNotFoundException getE() {
      return this.e;
    }

    public findInscripcion_result setE(ThriftInstanceNotFoundException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ThriftInscripcionDto)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ThriftInstanceNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findInscripcion_result)
        return this.equals((findInscripcion_result)that);
      return false;
    }

    public boolean equals(findInscripcion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findInscripcion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findInscripcion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findInscripcion_resultStandardSchemeFactory implements SchemeFactory {
      public findInscripcion_resultStandardScheme getScheme() {
        return new findInscripcion_resultStandardScheme();
      }
    }

    private static class findInscripcion_resultStandardScheme extends StandardScheme<findInscripcion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findInscripcion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ThriftInscripcionDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ThriftInstanceNotFoundException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findInscripcion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findInscripcion_resultTupleSchemeFactory implements SchemeFactory {
      public findInscripcion_resultTupleScheme getScheme() {
        return new findInscripcion_resultTupleScheme();
      }
    }

    private static class findInscripcion_resultTupleScheme extends TupleScheme<findInscripcion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findInscripcion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findInscripcion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ThriftInscripcionDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ThriftInstanceNotFoundException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class findInscripciones_args implements org.apache.thrift.TBase<findInscripciones_args, findInscripciones_args._Fields>, java.io.Serializable, Cloneable, Comparable<findInscripciones_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findInscripciones_args");

    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findInscripciones_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findInscripciones_argsTupleSchemeFactory());
    }

    public String email; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMAIL((short)1, "email");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL
            return EMAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findInscripciones_args.class, metaDataMap);
    }

    public findInscripciones_args() {
    }

    public findInscripciones_args(
      String email)
    {
      this();
      this.email = email;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findInscripciones_args(findInscripciones_args other) {
      if (other.isSetEmail()) {
        this.email = other.email;
      }
    }

    public findInscripciones_args deepCopy() {
      return new findInscripciones_args(this);
    }

    @Override
    public void clear() {
      this.email = null;
    }

    public String getEmail() {
      return this.email;
    }

    public findInscripciones_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL:
        return getEmail();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAIL:
        return isSetEmail();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findInscripciones_args)
        return this.equals((findInscripciones_args)that);
      return false;
    }

    public boolean equals(findInscripciones_args that) {
      if (that == null)
        return false;

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findInscripciones_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findInscripciones_args(");
      boolean first = true;

      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findInscripciones_argsStandardSchemeFactory implements SchemeFactory {
      public findInscripciones_argsStandardScheme getScheme() {
        return new findInscripciones_argsStandardScheme();
      }
    }

    private static class findInscripciones_argsStandardScheme extends StandardScheme<findInscripciones_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findInscripciones_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findInscripciones_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findInscripciones_argsTupleSchemeFactory implements SchemeFactory {
      public findInscripciones_argsTupleScheme getScheme() {
        return new findInscripciones_argsTupleScheme();
      }
    }

    private static class findInscripciones_argsTupleScheme extends TupleScheme<findInscripciones_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findInscripciones_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmail()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findInscripciones_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
      }
    }

  }

  public static class findInscripciones_result implements org.apache.thrift.TBase<findInscripciones_result, findInscripciones_result._Fields>, java.io.Serializable, Cloneable, Comparable<findInscripciones_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findInscripciones_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findInscripciones_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findInscripciones_resultTupleSchemeFactory());
    }

    public List<ThriftInscripcionDto> success; // required
    public ThriftInputValidationException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftInscripcionDto.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findInscripciones_result.class, metaDataMap);
    }

    public findInscripciones_result() {
    }

    public findInscripciones_result(
      List<ThriftInscripcionDto> success,
      ThriftInputValidationException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findInscripciones_result(findInscripciones_result other) {
      if (other.isSetSuccess()) {
        List<ThriftInscripcionDto> __this__success = new ArrayList<ThriftInscripcionDto>(other.success.size());
        for (ThriftInscripcionDto other_element : other.success) {
          __this__success.add(new ThriftInscripcionDto(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ThriftInputValidationException(other.e);
      }
    }

    public findInscripciones_result deepCopy() {
      return new findInscripciones_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ThriftInscripcionDto> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftInscripcionDto elem) {
      if (this.success == null) {
        this.success = new ArrayList<ThriftInscripcionDto>();
      }
      this.success.add(elem);
    }

    public List<ThriftInscripcionDto> getSuccess() {
      return this.success;
    }

    public findInscripciones_result setSuccess(List<ThriftInscripcionDto> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftInputValidationException getE() {
      return this.e;
    }

    public findInscripciones_result setE(ThriftInputValidationException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ThriftInscripcionDto>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ThriftInputValidationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findInscripciones_result)
        return this.equals((findInscripciones_result)that);
      return false;
    }

    public boolean equals(findInscripciones_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findInscripciones_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findInscripciones_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findInscripciones_resultStandardSchemeFactory implements SchemeFactory {
      public findInscripciones_resultStandardScheme getScheme() {
        return new findInscripciones_resultStandardScheme();
      }
    }

    private static class findInscripciones_resultStandardScheme extends StandardScheme<findInscripciones_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findInscripciones_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<ThriftInscripcionDto>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    ThriftInscripcionDto _elem10;
                    _elem10 = new ThriftInscripcionDto();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ThriftInputValidationException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findInscripciones_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftInscripcionDto _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findInscripciones_resultTupleSchemeFactory implements SchemeFactory {
      public findInscripciones_resultTupleScheme getScheme() {
        return new findInscripciones_resultTupleScheme();
      }
    }

    private static class findInscripciones_resultTupleScheme extends TupleScheme<findInscripciones_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findInscripciones_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftInscripcionDto _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findInscripciones_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ThriftInscripcionDto>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              ThriftInscripcionDto _elem15;
              _elem15 = new ThriftInscripcionDto();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ThriftInputValidationException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}
