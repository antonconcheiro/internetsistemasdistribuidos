/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package es.udc.ws.runfic.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftInscripcionDto implements org.apache.thrift.TBase<ThriftInscripcionDto, ThriftInscripcionDto._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftInscripcionDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftInscripcionDto");

  private static final org.apache.thrift.protocol.TField INSCRIPCION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inscripcionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CARRERA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("carreraId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField EMAIL_USUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("emailUsuario", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TARJETA_FIELD_DESC = new org.apache.thrift.protocol.TField("tarjeta", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DORSAL_FIELD_DESC = new org.apache.thrift.protocol.TField("dorsal", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ENTREGADO_FIELD_DESC = new org.apache.thrift.protocol.TField("entregado", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftInscripcionDtoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftInscripcionDtoTupleSchemeFactory());
  }

  public long inscripcionId; // required
  public long carreraId; // required
  public String emailUsuario; // required
  public String tarjeta; // required
  public int dorsal; // required
  public boolean entregado; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSCRIPCION_ID((short)1, "inscripcionId"),
    CARRERA_ID((short)2, "carreraId"),
    EMAIL_USUARIO((short)3, "emailUsuario"),
    TARJETA((short)4, "tarjeta"),
    DORSAL((short)5, "dorsal"),
    ENTREGADO((short)6, "entregado");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSCRIPCION_ID
          return INSCRIPCION_ID;
        case 2: // CARRERA_ID
          return CARRERA_ID;
        case 3: // EMAIL_USUARIO
          return EMAIL_USUARIO;
        case 4: // TARJETA
          return TARJETA;
        case 5: // DORSAL
          return DORSAL;
        case 6: // ENTREGADO
          return ENTREGADO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INSCRIPCIONID_ISSET_ID = 0;
  private static final int __CARRERAID_ISSET_ID = 1;
  private static final int __DORSAL_ISSET_ID = 2;
  private static final int __ENTREGADO_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSCRIPCION_ID, new org.apache.thrift.meta_data.FieldMetaData("inscripcionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CARRERA_ID, new org.apache.thrift.meta_data.FieldMetaData("carreraId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EMAIL_USUARIO, new org.apache.thrift.meta_data.FieldMetaData("emailUsuario", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TARJETA, new org.apache.thrift.meta_data.FieldMetaData("tarjeta", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DORSAL, new org.apache.thrift.meta_data.FieldMetaData("dorsal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENTREGADO, new org.apache.thrift.meta_data.FieldMetaData("entregado", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftInscripcionDto.class, metaDataMap);
  }

  public ThriftInscripcionDto() {
  }

  public ThriftInscripcionDto(
    long inscripcionId,
    long carreraId,
    String emailUsuario,
    String tarjeta,
    int dorsal,
    boolean entregado)
  {
    this();
    this.inscripcionId = inscripcionId;
    setInscripcionIdIsSet(true);
    this.carreraId = carreraId;
    setCarreraIdIsSet(true);
    this.emailUsuario = emailUsuario;
    this.tarjeta = tarjeta;
    this.dorsal = dorsal;
    setDorsalIsSet(true);
    this.entregado = entregado;
    setEntregadoIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftInscripcionDto(ThriftInscripcionDto other) {
    __isset_bitfield = other.__isset_bitfield;
    this.inscripcionId = other.inscripcionId;
    this.carreraId = other.carreraId;
    if (other.isSetEmailUsuario()) {
      this.emailUsuario = other.emailUsuario;
    }
    if (other.isSetTarjeta()) {
      this.tarjeta = other.tarjeta;
    }
    this.dorsal = other.dorsal;
    this.entregado = other.entregado;
  }

  public ThriftInscripcionDto deepCopy() {
    return new ThriftInscripcionDto(this);
  }

  @Override
  public void clear() {
    setInscripcionIdIsSet(false);
    this.inscripcionId = 0;
    setCarreraIdIsSet(false);
    this.carreraId = 0;
    this.emailUsuario = null;
    this.tarjeta = null;
    setDorsalIsSet(false);
    this.dorsal = 0;
    setEntregadoIsSet(false);
    this.entregado = false;
  }

  public long getInscripcionId() {
    return this.inscripcionId;
  }

  public ThriftInscripcionDto setInscripcionId(long inscripcionId) {
    this.inscripcionId = inscripcionId;
    setInscripcionIdIsSet(true);
    return this;
  }

  public void unsetInscripcionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSCRIPCIONID_ISSET_ID);
  }

  /** Returns true if field inscripcionId is set (has been assigned a value) and false otherwise */
  public boolean isSetInscripcionId() {
    return EncodingUtils.testBit(__isset_bitfield, __INSCRIPCIONID_ISSET_ID);
  }

  public void setInscripcionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSCRIPCIONID_ISSET_ID, value);
  }

  public long getCarreraId() {
    return this.carreraId;
  }

  public ThriftInscripcionDto setCarreraId(long carreraId) {
    this.carreraId = carreraId;
    setCarreraIdIsSet(true);
    return this;
  }

  public void unsetCarreraId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CARRERAID_ISSET_ID);
  }

  /** Returns true if field carreraId is set (has been assigned a value) and false otherwise */
  public boolean isSetCarreraId() {
    return EncodingUtils.testBit(__isset_bitfield, __CARRERAID_ISSET_ID);
  }

  public void setCarreraIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CARRERAID_ISSET_ID, value);
  }

  public String getEmailUsuario() {
    return this.emailUsuario;
  }

  public ThriftInscripcionDto setEmailUsuario(String emailUsuario) {
    this.emailUsuario = emailUsuario;
    return this;
  }

  public void unsetEmailUsuario() {
    this.emailUsuario = null;
  }

  /** Returns true if field emailUsuario is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailUsuario() {
    return this.emailUsuario != null;
  }

  public void setEmailUsuarioIsSet(boolean value) {
    if (!value) {
      this.emailUsuario = null;
    }
  }

  public String getTarjeta() {
    return this.tarjeta;
  }

  public ThriftInscripcionDto setTarjeta(String tarjeta) {
    this.tarjeta = tarjeta;
    return this;
  }

  public void unsetTarjeta() {
    this.tarjeta = null;
  }

  /** Returns true if field tarjeta is set (has been assigned a value) and false otherwise */
  public boolean isSetTarjeta() {
    return this.tarjeta != null;
  }

  public void setTarjetaIsSet(boolean value) {
    if (!value) {
      this.tarjeta = null;
    }
  }

  public int getDorsal() {
    return this.dorsal;
  }

  public ThriftInscripcionDto setDorsal(int dorsal) {
    this.dorsal = dorsal;
    setDorsalIsSet(true);
    return this;
  }

  public void unsetDorsal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DORSAL_ISSET_ID);
  }

  /** Returns true if field dorsal is set (has been assigned a value) and false otherwise */
  public boolean isSetDorsal() {
    return EncodingUtils.testBit(__isset_bitfield, __DORSAL_ISSET_ID);
  }

  public void setDorsalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DORSAL_ISSET_ID, value);
  }

  public boolean isEntregado() {
    return this.entregado;
  }

  public ThriftInscripcionDto setEntregado(boolean entregado) {
    this.entregado = entregado;
    setEntregadoIsSet(true);
    return this;
  }

  public void unsetEntregado() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTREGADO_ISSET_ID);
  }

  /** Returns true if field entregado is set (has been assigned a value) and false otherwise */
  public boolean isSetEntregado() {
    return EncodingUtils.testBit(__isset_bitfield, __ENTREGADO_ISSET_ID);
  }

  public void setEntregadoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTREGADO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSCRIPCION_ID:
      if (value == null) {
        unsetInscripcionId();
      } else {
        setInscripcionId((Long)value);
      }
      break;

    case CARRERA_ID:
      if (value == null) {
        unsetCarreraId();
      } else {
        setCarreraId((Long)value);
      }
      break;

    case EMAIL_USUARIO:
      if (value == null) {
        unsetEmailUsuario();
      } else {
        setEmailUsuario((String)value);
      }
      break;

    case TARJETA:
      if (value == null) {
        unsetTarjeta();
      } else {
        setTarjeta((String)value);
      }
      break;

    case DORSAL:
      if (value == null) {
        unsetDorsal();
      } else {
        setDorsal((Integer)value);
      }
      break;

    case ENTREGADO:
      if (value == null) {
        unsetEntregado();
      } else {
        setEntregado((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSCRIPCION_ID:
      return Long.valueOf(getInscripcionId());

    case CARRERA_ID:
      return Long.valueOf(getCarreraId());

    case EMAIL_USUARIO:
      return getEmailUsuario();

    case TARJETA:
      return getTarjeta();

    case DORSAL:
      return Integer.valueOf(getDorsal());

    case ENTREGADO:
      return Boolean.valueOf(isEntregado());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSCRIPCION_ID:
      return isSetInscripcionId();
    case CARRERA_ID:
      return isSetCarreraId();
    case EMAIL_USUARIO:
      return isSetEmailUsuario();
    case TARJETA:
      return isSetTarjeta();
    case DORSAL:
      return isSetDorsal();
    case ENTREGADO:
      return isSetEntregado();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftInscripcionDto)
      return this.equals((ThriftInscripcionDto)that);
    return false;
  }

  public boolean equals(ThriftInscripcionDto that) {
    if (that == null)
      return false;

    boolean this_present_inscripcionId = true;
    boolean that_present_inscripcionId = true;
    if (this_present_inscripcionId || that_present_inscripcionId) {
      if (!(this_present_inscripcionId && that_present_inscripcionId))
        return false;
      if (this.inscripcionId != that.inscripcionId)
        return false;
    }

    boolean this_present_carreraId = true;
    boolean that_present_carreraId = true;
    if (this_present_carreraId || that_present_carreraId) {
      if (!(this_present_carreraId && that_present_carreraId))
        return false;
      if (this.carreraId != that.carreraId)
        return false;
    }

    boolean this_present_emailUsuario = true && this.isSetEmailUsuario();
    boolean that_present_emailUsuario = true && that.isSetEmailUsuario();
    if (this_present_emailUsuario || that_present_emailUsuario) {
      if (!(this_present_emailUsuario && that_present_emailUsuario))
        return false;
      if (!this.emailUsuario.equals(that.emailUsuario))
        return false;
    }

    boolean this_present_tarjeta = true && this.isSetTarjeta();
    boolean that_present_tarjeta = true && that.isSetTarjeta();
    if (this_present_tarjeta || that_present_tarjeta) {
      if (!(this_present_tarjeta && that_present_tarjeta))
        return false;
      if (!this.tarjeta.equals(that.tarjeta))
        return false;
    }

    boolean this_present_dorsal = true;
    boolean that_present_dorsal = true;
    if (this_present_dorsal || that_present_dorsal) {
      if (!(this_present_dorsal && that_present_dorsal))
        return false;
      if (this.dorsal != that.dorsal)
        return false;
    }

    boolean this_present_entregado = true;
    boolean that_present_entregado = true;
    if (this_present_entregado || that_present_entregado) {
      if (!(this_present_entregado && that_present_entregado))
        return false;
      if (this.entregado != that.entregado)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ThriftInscripcionDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInscripcionId()).compareTo(other.isSetInscripcionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInscripcionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inscripcionId, other.inscripcionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarreraId()).compareTo(other.isSetCarreraId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarreraId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carreraId, other.carreraId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmailUsuario()).compareTo(other.isSetEmailUsuario());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailUsuario()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailUsuario, other.emailUsuario);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTarjeta()).compareTo(other.isSetTarjeta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarjeta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tarjeta, other.tarjeta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDorsal()).compareTo(other.isSetDorsal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDorsal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dorsal, other.dorsal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntregado()).compareTo(other.isSetEntregado());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntregado()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entregado, other.entregado);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftInscripcionDto(");
    boolean first = true;

    sb.append("inscripcionId:");
    sb.append(this.inscripcionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("carreraId:");
    sb.append(this.carreraId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("emailUsuario:");
    if (this.emailUsuario == null) {
      sb.append("null");
    } else {
      sb.append(this.emailUsuario);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tarjeta:");
    if (this.tarjeta == null) {
      sb.append("null");
    } else {
      sb.append(this.tarjeta);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dorsal:");
    sb.append(this.dorsal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("entregado:");
    sb.append(this.entregado);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftInscripcionDtoStandardSchemeFactory implements SchemeFactory {
    public ThriftInscripcionDtoStandardScheme getScheme() {
      return new ThriftInscripcionDtoStandardScheme();
    }
  }

  private static class ThriftInscripcionDtoStandardScheme extends StandardScheme<ThriftInscripcionDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftInscripcionDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSCRIPCION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.inscripcionId = iprot.readI64();
              struct.setInscripcionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CARRERA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.carreraId = iprot.readI64();
              struct.setCarreraIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMAIL_USUARIO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.emailUsuario = iprot.readString();
              struct.setEmailUsuarioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TARJETA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tarjeta = iprot.readString();
              struct.setTarjetaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DORSAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dorsal = iprot.readI32();
              struct.setDorsalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ENTREGADO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.entregado = iprot.readBool();
              struct.setEntregadoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftInscripcionDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INSCRIPCION_ID_FIELD_DESC);
      oprot.writeI64(struct.inscripcionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CARRERA_ID_FIELD_DESC);
      oprot.writeI64(struct.carreraId);
      oprot.writeFieldEnd();
      if (struct.emailUsuario != null) {
        oprot.writeFieldBegin(EMAIL_USUARIO_FIELD_DESC);
        oprot.writeString(struct.emailUsuario);
        oprot.writeFieldEnd();
      }
      if (struct.tarjeta != null) {
        oprot.writeFieldBegin(TARJETA_FIELD_DESC);
        oprot.writeString(struct.tarjeta);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DORSAL_FIELD_DESC);
      oprot.writeI32(struct.dorsal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENTREGADO_FIELD_DESC);
      oprot.writeBool(struct.entregado);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftInscripcionDtoTupleSchemeFactory implements SchemeFactory {
    public ThriftInscripcionDtoTupleScheme getScheme() {
      return new ThriftInscripcionDtoTupleScheme();
    }
  }

  private static class ThriftInscripcionDtoTupleScheme extends TupleScheme<ThriftInscripcionDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftInscripcionDto struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInscripcionId()) {
        optionals.set(0);
      }
      if (struct.isSetCarreraId()) {
        optionals.set(1);
      }
      if (struct.isSetEmailUsuario()) {
        optionals.set(2);
      }
      if (struct.isSetTarjeta()) {
        optionals.set(3);
      }
      if (struct.isSetDorsal()) {
        optionals.set(4);
      }
      if (struct.isSetEntregado()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetInscripcionId()) {
        oprot.writeI64(struct.inscripcionId);
      }
      if (struct.isSetCarreraId()) {
        oprot.writeI64(struct.carreraId);
      }
      if (struct.isSetEmailUsuario()) {
        oprot.writeString(struct.emailUsuario);
      }
      if (struct.isSetTarjeta()) {
        oprot.writeString(struct.tarjeta);
      }
      if (struct.isSetDorsal()) {
        oprot.writeI32(struct.dorsal);
      }
      if (struct.isSetEntregado()) {
        oprot.writeBool(struct.entregado);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftInscripcionDto struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.inscripcionId = iprot.readI64();
        struct.setInscripcionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.carreraId = iprot.readI64();
        struct.setCarreraIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.emailUsuario = iprot.readString();
        struct.setEmailUsuarioIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tarjeta = iprot.readString();
        struct.setTarjetaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dorsal = iprot.readI32();
        struct.setDorsalIsSet(true);
      }
      if (incoming.get(5)) {
        struct.entregado = iprot.readBool();
        struct.setEntregadoIsSet(true);
      }
    }
  }

}

